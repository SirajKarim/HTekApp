{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\HTekApp\\\\screens\\\\Pedometer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { Pedometer } from 'expo-sensors';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar MyPedometer = function (_React$Component) {\n  _inherits(MyPedometer, _React$Component);\n\n  var _super = _createSuper(MyPedometer);\n\n  function MyPedometer() {\n    var _this;\n\n    _classCallCheck(this, MyPedometer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isPedometerAvailable: 'checking',\n      pastStepCount: 0,\n      currentStepCount: 0\n    };\n\n    _this._subscribe = function () {\n      _this._subscription = Pedometer.watchStepCount(function (result) {\n        _this.setState({\n          currentStepCount: result.steps\n        });\n      });\n      Pedometer.isAvailableAsync().then(function (result) {\n        _this.setState({\n          isPedometerAvailable: String(result)\n        });\n      }, function (error) {\n        _this.setState({\n          isPedometerAvailable: 'Could not get isPedometerAvailable: ' + error\n        });\n      });\n      var end = new Date();\n      var start = new Date();\n      start.setDate(end.getDate() - 1);\n      Pedometer.getStepCountAsync(start, end).then(function (result) {\n        _this.setState({\n          pastStepCount: result.steps\n        });\n      }, function (error) {\n        _this.setState({\n          pastStepCount: 'Could not get stepCount: ' + error\n        });\n      });\n    };\n\n    _this._unsubscribe = function () {\n      _this._subscription && _this._subscription.remove();\n      _this._subscription = null;\n    };\n\n    return _this;\n  }\n\n  _createClass(MyPedometer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._subscribe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, \"Pedometer.isAvailableAsync(): \", this.state.isPedometerAvailable), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, \"Steps taken in the last 24 hours: \", this.state.pastStepCount), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      }, \"Walk! And watch this go up: \", this.state.currentStepCount));\n    }\n  }]);\n\n  return MyPedometer;\n}(React.Component);\n\nexport { MyPedometer as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 15,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["F:/HTekApp/screens/Pedometer.js"],"names":["React","Pedometer","MyPedometer","state","isPedometerAvailable","pastStepCount","currentStepCount","_subscribe","_subscription","watchStepCount","result","setState","steps","isAvailableAsync","then","String","error","end","Date","start","setDate","getDate","getStepCountAsync","_unsubscribe","remove","styles","container","Component","StyleSheet","create","flex","marginTop","alignItems","justifyContent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;;;;;IAGqBC,W;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,oBAAoB,EAAE,UADhB;AAENC,MAAAA,aAAa,EAAE,CAFT;AAGNC,MAAAA,gBAAgB,EAAE;AAHZ,K;;UAcRC,U,GAAa,YAAM;AACjB,YAAKC,aAAL,GAAqBP,SAAS,CAACQ,cAAV,CAAyB,UAAAC,MAAM,EAAI;AACtD,cAAKC,QAAL,CAAc;AACZL,UAAAA,gBAAgB,EAAEI,MAAM,CAACE;AADb,SAAd;AAGD,OAJoB,CAArB;AAMAX,MAAAA,SAAS,CAACY,gBAAV,GAA6BC,IAA7B,CACE,UAAAJ,MAAM,EAAI;AACR,cAAKC,QAAL,CAAc;AACZP,UAAAA,oBAAoB,EAAEW,MAAM,CAACL,MAAD;AADhB,SAAd;AAGD,OALH,EAME,UAAAM,KAAK,EAAI;AACP,cAAKL,QAAL,CAAc;AACZP,UAAAA,oBAAoB,EAAE,yCAAyCY;AADnD,SAAd;AAGD,OAVH;AAaA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,UAAMC,KAAK,GAAG,IAAID,IAAJ,EAAd;AACAC,MAAAA,KAAK,CAACC,OAAN,CAAcH,GAAG,CAACI,OAAJ,KAAgB,CAA9B;AACApB,MAAAA,SAAS,CAACqB,iBAAV,CAA4BH,KAA5B,EAAmCF,GAAnC,EAAwCH,IAAxC,CACE,UAAAJ,MAAM,EAAI;AACR,cAAKC,QAAL,CAAc;AAAEN,UAAAA,aAAa,EAAEK,MAAM,CAACE;AAAxB,SAAd;AACD,OAHH,EAIE,UAAAI,KAAK,EAAI;AACP,cAAKL,QAAL,CAAc;AACZN,UAAAA,aAAa,EAAE,8BAA8BW;AADjC,SAAd;AAGD,OARH;AAUD,K;;UAEDO,Y,GAAe,YAAM;AACnB,YAAKf,aAAL,IAAsB,MAAKA,aAAL,CAAmBgB,MAAnB,EAAtB;AACA,YAAKhB,aAAL,GAAqB,IAArB;AACD,K;;;;;;;wCA9CmB;AAClB,WAAKD,UAAL;AACD;;;2CAEsB;AACrB,WAAKgB,YAAL;AACD;;;6BA0CQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAqC,KAAKvB,KAAL,CAAWC,oBAAhD,CADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAyC,KAAKD,KAAL,CAAWE,aAApD,CAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAmC,KAAKF,KAAL,CAAWG,gBAA9C,CAHF,CADF;AAOD;;;;EA/DsCN,KAAK,CAAC2B,S;;SAA1BzB,W;AAkErB,IAAMuB,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,SAAS,EAAE,EAFF;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { Pedometer } from 'expo-sensors';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\nexport default class MyPedometer extends React.Component {\r\n  state = {\r\n    isPedometerAvailable: 'checking',\r\n    pastStepCount: 0,\r\n    currentStepCount: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this._subscribe();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._unsubscribe();\r\n  }\r\n\r\n  _subscribe = () => {\r\n    this._subscription = Pedometer.watchStepCount(result => {\r\n      this.setState({\r\n        currentStepCount: result.steps,\r\n      });\r\n    });\r\n\r\n    Pedometer.isAvailableAsync().then(\r\n      result => {\r\n        this.setState({\r\n          isPedometerAvailable: String(result),\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          isPedometerAvailable: 'Could not get isPedometerAvailable: ' + error,\r\n        });\r\n      }\r\n    );\r\n\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(end.getDate() - 1);\r\n    Pedometer.getStepCountAsync(start, end).then(\r\n      result => {\r\n        this.setState({ pastStepCount: result.steps });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          pastStepCount: 'Could not get stepCount: ' + error,\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  _unsubscribe = () => {\r\n    this._subscription && this._subscription.remove();\r\n    this._subscription = null;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text>Pedometer.isAvailableAsync(): {this.state.isPedometerAvailable}</Text>\r\n        <Text>Steps taken in the last 24 hours: {this.state.pastStepCount}</Text>\r\n        <Text>Walk! And watch this go up: {this.state.currentStepCount}</Text>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 15,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}