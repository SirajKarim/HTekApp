{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"F:\\\\HTekApp\\\\screens\\\\controlscreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { Card, Button, Title, Paragraph, TextInput, RadioButton } from 'react-native-paper';\nimport SwitchBtn from \"../components/switch\";\nimport ValSlider from \"../components/slider\";\nimport Dimmer from \"../components/dimmer\";\nimport { MaterialIcons } from '@expo/vector-icons';\n\nvar ControlScreen = function (_Component) {\n  _inherits(ControlScreen, _Component);\n\n  var _super = _createSuper(ControlScreen);\n\n  function ControlScreen() {\n    var _this;\n\n    _classCallCheck(this, ControlScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      modalVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(ControlScreen, [{\n    key: \"toggleModal\",\n    value: function toggleModal(visible) {\n      this.setState({\n        modalVisible: visible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.mybg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }, React.createElement(TouchableHighlight, {\n        style: styles.tile,\n        onLongPress: function onLongPress() {\n          _this2.toggleModal(true);\n        },\n        underlayColor: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 20\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.myheading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, \"Switch 1\"), React.createElement(SwitchBtn, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }\n      })))));\n    }\n  }]);\n\n  return ControlScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  mybg: {\n    backgroundColor: '#dfe5f0',\n    flex: 1\n  },\n  modal: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#f7021a',\n    padding: 100\n  },\n  container: {\n    flex: 0.185,\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  },\n  tile: {\n    height: '80%',\n    width: '45%',\n    backgroundColor: 'lightblue',\n    justifyContent: 'center',\n    marginTop: '4%'\n  },\n  rgbtile: {\n    height: '100%',\n    width: '92%',\n    backgroundColor: 'lightblue',\n    justifyContent: 'center',\n    marginTop: '4%'\n  },\n  sldr: {\n    alignItems: 'center'\n  },\n  myheading: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    flexWrap: 'wrap',\n    textAlign: 'center'\n  }\n});\nexport default ControlScreen;","map":{"version":3,"sources":["F:/HTekApp/screens/controlscreen.js"],"names":["React","Component","Card","Button","Title","Paragraph","TextInput","RadioButton","SwitchBtn","ValSlider","Dimmer","MaterialIcons","ControlScreen","state","modalVisible","visible","setState","styles","mybg","container","tile","toggleModal","myheading","StyleSheet","create","backgroundColor","flex","modal","alignItems","padding","flexWrap","flexDirection","justifyContent","height","width","marginTop","rgbtile","sldr","fontSize","fontWeight","textAlign"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;;;;;;AAEA,SAASC,IAAT,EAAeC,MAAf,EAAsBC,KAAtB,EAA4BC,SAA5B,EAAsCC,SAAtC,EAAgDC,WAAhD,QAAqE,oBAArE;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,MAAP;AACA,SAASC,aAAT,QAA8B,oBAA9B;;IAEMC,a;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,YAAY,EAAE;AADV,K;;;;;;gCAGKC,O,EAAS;AAClB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,YAAY,EAAEC;AAAhB,OAAd;AACF;;;6BACM;AAAA;;AACJ,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAIE,MAAM,CAACC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAoDI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAID,MAAM,CAACE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,kBAAD;AAAoB,QAAA,KAAK,EAAEF,MAAM,CAACG,IAAlC;AAAwC,QAAA,WAAW,EAAI,uBAAM;AAAC,UAAA,MAAI,CAACC,WAAL,CAAiB,IAAjB;AAAuB,SAArF;AAAwF,QAAA,aAAa,EAAG,OAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAIJ,MAAM,CAACK,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADD,CADH,CApDJ,CADJ;AAsEH;;;;EA9EuBrB,S;;AAiF5B,IAAMgB,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC7BN,EAAAA,IAAI,EAAE;AACFO,IAAAA,eAAe,EAAE,SADf;AAEFC,IAAAA,IAAI,EAAG;AAFL,GADuB;AAK7BC,EAAAA,KAAK,EAAE;AACHD,IAAAA,IAAI,EAAE,CADH;AAEHE,IAAAA,UAAU,EAAE,QAFT;AAGHH,IAAAA,eAAe,EAAE,SAHd;AAIHI,IAAAA,OAAO,EAAE;AAJN,GALsB;AAW7BV,EAAAA,SAAS,EAAE;AACPO,IAAAA,IAAI,EAAE,KADC;AAEPI,IAAAA,QAAQ,EAAE,MAFH;AAGPC,IAAAA,aAAa,EAAE,KAHR;AAKPC,IAAAA,cAAc,EAAE;AALT,GAXkB;AAsB7BZ,EAAAA,IAAI,EAAE;AACFa,IAAAA,MAAM,EAAE,KADN;AAEFC,IAAAA,KAAK,EAAC,KAFJ;AAGFT,IAAAA,eAAe,EAAC,WAHd;AAIFO,IAAAA,cAAc,EAAE,QAJd;AAKFG,IAAAA,SAAS,EAAE;AALT,GAtBuB;AA8B7BC,EAAAA,OAAO,EAAE;AACLH,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,KAAK,EAAC,KAFD;AAGLT,IAAAA,eAAe,EAAC,WAHX;AAILO,IAAAA,cAAc,EAAE,QAJX;AAKLG,IAAAA,SAAS,EAAE;AALN,GA9BoB;AAsC7BE,EAAAA,IAAI,EAAE;AACHT,IAAAA,UAAU,EAAE;AADT,GAtCuB;AA0C7BN,EAAAA,SAAS,EAAE;AACPgB,IAAAA,QAAQ,EAAC,EADF;AAEPC,IAAAA,UAAU,EAAE,MAFL;AAGPT,IAAAA,QAAQ,EAAE,MAHH;AAIPU,IAAAA,SAAS,EAAE;AAJJ;AA1CkB,CAAlB,CAAf;AAkDA,eAAe5B,aAAf","sourcesContent":["import React,{Component} from 'react';\r\nimport { StyleSheet,View,Text,TouchableHighlight,Modal } from 'react-native';\r\nimport { Card, Button,Title,Paragraph,TextInput,RadioButton   } from 'react-native-paper';\r\nimport SwitchBtn from '../components/switch';\r\nimport ValSlider from '../components/slider'\r\nimport Dimmer from '../components/dimmer';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\n\r\nclass ControlScreen extends Component{\r\n    state = {\r\n        modalVisible: false,\r\n     }\r\n     toggleModal(visible) {\r\n        this.setState({ modalVisible: visible });\r\n     }\r\n    render(){\r\n        return (\r\n            <View style = {styles.mybg} >\r\n                 {/* <Modal animationType = {\"slide\"} transparent = {false}\r\n               visible = {this.state.modalVisible}\r\n               onRequestClose = {() => { console.log(\"Modal has been closed.\") } }>\r\n               \r\n               <View style = {styles.modal}>\r\n               <Text style = {styles.myheading}>BUTTON EDITOR</Text>\r\n               <View style = {{width: 300, height: 70}}>\r\n               <TextInput\r\n                label=\"Status Off\"\r\n                placeholder = \"Light Off\"\r\n                />\r\n               </View>\r\n               <View style = {{width: 300, height: 70}}>\r\n               <TextInput\r\n                label=\"Status On\"\r\n                placeholder = \"Light On\"\r\n                />\r\n               </View> */}\r\n               {/* <RadioButton\r\n                value=\"first\"\r\n                status={ checked === 'first' ? 'checked' : 'unchecked' }\r\n                onPress={() => setChecked('first')}\r\n               /> \r\n              <RadioButton\r\n              value=\"second\"\r\n              status={ checked === 'second' ? 'checked' : 'unchecked' }\r\n               onPress={() => setChecked('second')}\r\n             /> */}\r\n               {/* <View style = {{width: 300, height: 70}}>\r\n               <TextInput\r\n                label=\"Hexadecimal Code\"\r\n                placeholder = \"012 235 110 11\"\r\n                />\r\n               </View>\r\n               <View style = {{width: 300, height: 70}}>\r\n               <TextInput\r\n                 label=\"Hexadecimal Code\"\r\n                placeholder = \"012 235 110 11\"\r\n                />\r\n               </View>\r\n             \r\n              \r\n                  \r\n                  <TouchableHighlight onPress = {() => {\r\n                     this.toggleModal(!this.state.modalVisible)}}>\r\n                     \r\n                     <Text style = {{fontWeight:\"bold\"}}>Close Modal</Text>\r\n                  </TouchableHighlight>\r\n               </View>\r\n            </Modal> */}\r\n               \r\n                <View style = {styles.container}>\r\n                   <TouchableHighlight style={styles.tile} onLongPress = {() => {this.toggleModal(true)}}  underlayColor = \"white\">\r\n                    <View >\r\n                        <Text style = {styles.myheading}>Switch 1</Text>\r\n                        <SwitchBtn />\r\n                    </View>\r\n                   </TouchableHighlight>\r\n                   {/* <TouchableHighlight style={styles.tile} onLongPress = {console.log(\"onHoldingButton\")}  underlayColor = \"white\">\r\n                    <View >\r\n                    <Text  style = {styles.myheading}>Switch 2</Text>\r\n                    <SwitchBtn />\r\n                    </View>\r\n                   </TouchableHighlight> */}\r\n                 \r\n                </View>\r\n            </View>\r\n       );\r\n    }  \r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    mybg: {\r\n        backgroundColor: '#dfe5f0',\r\n        flex : 1,\r\n    },\r\n    modal: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        backgroundColor: '#f7021a',\r\n        padding: 100\r\n     },\r\n    container: {\r\n        flex: 0.185,\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        // alignItems:'center',\r\n        justifyContent: 'space-evenly',\r\n        // backgroundColor:'grey'\r\n      \r\n\r\n        \r\n    },\r\n    tile: {\r\n        height: '80%',\r\n        width:'45%',\r\n        backgroundColor:'lightblue',\r\n        justifyContent: 'center',\r\n        marginTop: '4%'\r\n\r\n    },\r\n    rgbtile: {\r\n        height: '100%',\r\n        width:'92%',\r\n        backgroundColor:'lightblue',\r\n        justifyContent: 'center',\r\n        marginTop: '4%'\r\n\r\n    },\r\n    sldr: {\r\n       alignItems: 'center'\r\n\r\n    },\r\n    myheading: {\r\n        fontSize:18,\r\n        fontWeight: 'bold',\r\n        flexWrap: 'wrap',\r\n        textAlign: 'center'\r\n    }\r\n});\r\n\r\nexport default ControlScreen; "]},"metadata":{},"sourceType":"module"}